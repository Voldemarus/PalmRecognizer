#!/usr/bin/perl

#  GenerateImageSet.pl
#  PalmRecognizer
#
#  Created by Водолазкий В.В. on 22/05/2019.
#  Copyright © 2019 Geomatix Laboratory S.R.O. All rights reserved.

#
# Script used to parse directory with hierarchy of images to be tested
# and to create appropriate ImageList+ImageDataList.m file
#

use Data::Dumper;

#destination file
my $outFileName = "ImageList+ImageDataList.m";
#folder with images inside Project DIR
my $imageSetDirectory = "ImageSet";
#folder name where templates are stored
my $templatesDirectory = "Templates";


my ($projectDir) = @ARGV;
if (defined($projectDir)) {
	$classDir = $projectDir."/PalmRecognizer";
	$outputFile = $classDir."/DataModel/ImageList+ImageDataList.m";
	print "outfile - $outputFile\n";
	opendir (DIR, $classDir) or die "unable to open $projectDir -> $!\n";
	# look for an image set directory
	my $size = @files2 = grep {/^$imageSetDirectory$/} readdir DIR;
	closedir DIR;
	if ($size > 0) {
		# proper directory found
		my $imageDir = $classDir."/".$imageSetDirectory;
		opendir (IMDIR,$imageDir) or die "Cannot open $imageSetDirectory -> $!";
		# search for templates
		my @imDirs = readdir IMDIR;
		#		print "omDirs ".Dumper(\@imDirs);
		my $templateDir = $imageDir."/".$templatesDirectory;
		#	print "Templat directory - $templateDir \n";
		opendir (TEMPLATEDIR, $templateDir) || die "Cannot open template directory - $!";
		my @templates = grep {/^.+\.jpg$/} readdir TEMPLATEDIR;
		#		print "templates ".Dumper(\@templates);
		#
		# fill array with template' filenames
		#
		$size = @templates;
		if ($size > 0) {
			# template set is not empty. we can start writing output file
			open(OUTFILE, ">", $outputFile) || die "Cannot create output file $outputFile -$!";
			#print header
			print OUTFILE "//  NSString+ImageDataList.m\n";
			print OUTFILE "//  PalmRecognizer\n";
			print OUTFILE "//\n";
			@months = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
			@days = qw(Sun Mon Tue Wed Thu Fri Sat Sun);
			
			($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
			$date = "$mday $months[$mon] $days[$wday] $hour:$min:$sec";
			print OUTFILE "//  Created by Водолазкий В.В. on $date\n";
			print OUTFILE "//  Copyright © 2019 Geomatix Laboratory S.R.O. All rights reserved.\n";
			print OUTFILE "//\n";
			print OUTFILE "//  DO NOT EDIT! This file is autogenerated by GenerateImageSet.pl script\n";
			print OUTFILE "//\n\n";
			print OUTFILE "\#import \"ImageList+ImageDataList.h\"\n";
			print OUTFILE "\n";
			print OUTFILE "\@implementation NSString (ImageDataList)\n\n";

			print OUTFILE "- (NSArray *) imageSet\n";
			print OUTFILE "{\n";
			print OUTFILE "		NSArray *imSet = @[\n";
			
			print OUTFILE "\t\t\// List of template images\n";
			for ($i = 0; $i < $size; $i++) {
				print OUTFILE "\t\t\t\@[\@\"$templates[$i]\",\@\"\"],\n";
			}
			for ($i = 0; $i < $size; $i++) {
				my ($templateClass) = $templates[$i] =~ /(.+)\.jpg/;
				if ($templateDir ne "") {
					$templateDir = $imageDir."/".$templateClass;
					opendir (TESTDIR, $templateDir) || next;
					my @files = grep {/^.+\.jpg$/} readdir TESTDIR;
					my $sFiles = @files;
#					print Dumper(\@files);
					if ($sFiles > 0) {
						print OUTFILE "\t\t\// Test files for set $templateClass\n";
						for ($k = 0; $k < $sFiles; $k++) {
							print OUTFILE "\t\t\t\@[\@\"$files[$k]\",\@\"$templateClass\"],\n";
						}
					}
					closedir TESTDIR;
				}
				
			}

			#Here image set is placed
			print OUTFILE "	];\n";
			print OUTFILE "	return imSet;\n";
			print OUTFILE "}\n\n";
			print OUTFILE "\@end\n";

			close OUTFILE;
			
		}
	}
} else {
	print "PROJECT_DIR should be used as command line argument\n";
	exit 1;
}



exit 0;
